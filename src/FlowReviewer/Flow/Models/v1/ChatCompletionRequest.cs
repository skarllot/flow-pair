using System.Collections.Immutable;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using Raiqub.Generators.EnumUtilities;

namespace Ciandt.FlowTools.FlowReviewer.Flow.Models.v1;

/// <param name="AllowedModels">The list of models to use for this request.</param>
/// <param name="Messages">A list of messages comprising the conversation so far.</param>
/// <param name="Temperature">
/// <para>What sampling temperature to use, between 0 and 2.</para>
/// <para>Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.</para>
/// <para>We generally recommend altering this or top_p but not both.</para>
/// </param>
/// <param name="TopP">
/// <para>An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.</para>
/// <para>So 0.1 means only the tokens comprising the top 10% probability mass are considered.</para>
/// <para>We generally recommend altering this or temperature but not both.</para>
/// </param>
/// <param name="Stream">If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.</param>
/// <param name="Stop">Up to four sequences where the API will stop generating further tokens.</param>
/// <param name="MaxTokens">
/// <para>The maximum number of tokens that can be generated in the chat completion.</para>
/// <para>The total length of input tokens and generated tokens is limited by the model's context length.</para>
/// </param>
/// <param name="PresencePenalty">Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.</param>
/// <param name="FrequencyPenalty"></param>
/// <param name="LogitBias">
/// <para>Modify the likelihood of specified tokens appearing in the completion.</para>
/// <para>Accepts a json object that maps tokens
/// (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the
/// bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but
/// values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result
/// in a ban or exclusive selection of the relevant token.</para>
/// </param>
/// <param name="User">A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.</param>
/// <param name="N">
/// <para>How many chat completion choices to generate for each input message.</para>
/// <para>Note that you'll be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.</para>
/// </param>
public sealed record ChatCompletionRequest(
    /*[property: JsonPropertyName("allowed_models")] ImmutableList<AllowedModel> AllowedModels,*/
    [property: JsonPropertyName("model")] AllowedModel Model,
    [property: JsonPropertyName("messages")] ImmutableList<Message> Messages/*,
    [property: JsonPropertyName("temperature")] float? Temperature = 1,
    [property: JsonPropertyName("top_p")] float? TopP = 1,
    [property: JsonPropertyName("stream")] bool? Stream = false,
    [property: JsonPropertyName("stop")] ImmutableList<string>? Stop = null,
    [property: JsonPropertyName("max_tokens")] int MaxTokens = 4096,
    [property: JsonPropertyName("presence_penalty")] float PresencePenalty = 0,
    [property: JsonPropertyName("frequency_penalty")] float FrequencyPenalty = 0,
    [property: JsonPropertyName("logit_bias")] ImmutableDictionary<string, int>? LogitBias = null,
    [property: JsonPropertyName("user")] string? User = null,
    [property: JsonPropertyName("n")] int? N = 1*/);

/// <param name="Role">The role of the messages author.</param>
/// <param name="Content">The contents of the message. content is required for all messages except assistant messages with function calls.</param>
/// <param name="Name">The name of the author of this message. name is required if role is function, and it should be the name of the function whose response is in the content. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.</param>
/// <param name="FunctionCall">The name and arguments of a function that should be called, as generated by the model.</param>
public sealed record Message(
    [property: JsonPropertyName("role")] Role Role,
    [property: JsonPropertyName("content")] string Content,
    [property: JsonPropertyName("name")] string? Name = null,
    [property: JsonPropertyName("function_call")] FunctionCallDetails? FunctionCall = null);

public sealed record FunctionCallDetails(
    string Name,
    string Arguments);

//[JsonConverterGenerator(AllowIntegerValues = false)]
[EnumGenerator]
[JsonConverter(typeof(RoleJsonConverter))]
public enum Role
{
    [JsonPropertyName("system")] System,
    [JsonPropertyName("user")] User,
    [JsonPropertyName("assistant")] Assistant,
    [JsonPropertyName("function")] Function
}

//[JsonConverterGenerator(AllowIntegerValues = false)]
[EnumGenerator]
[JsonConverter(typeof(AllowedModelJsonConverter))]
public enum AllowedModel
{
    [JsonPropertyName("gpt-4")] Gpt4,
    [JsonPropertyName("gpt-4o")] Gpt4o,
    [JsonPropertyName("gpt-4o-mini")] Gpt4oMini,
    [JsonPropertyName("gpt-35-turbo")] Gpt35Turbo,
    [JsonPropertyName("text-embedding-ada-002")] TextEmbeddingAda002,
    [JsonPropertyName("textembedding-gecko@003")] TextembeddingGecko003,
    [JsonPropertyName("gemini-1.5-flash")] Gemini15Flash,
    [JsonPropertyName("gemini-1.5-pro")] Gemini15Pro,
    [JsonPropertyName("anthropic.claude-3-sonnet")] Claude3Sonnet,
    [JsonPropertyName("anthropic.claude-35-sonnet")] Claude35Sonnet,
    [JsonPropertyName("meta.llama3-70b-instruct")] Llama370b
}
